.TH "Brigerad::OpenGLShader" 3 "Sun Feb 7 2021" "Version 0.2" "Brigerad" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Brigerad::OpenGLShader
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <OpenGLShader\&.h>\fP
.PP
Inherits \fBBrigerad::Shader\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBOpenGLShader\fP ()=default"
.br
.ti -1c
.RI "\fBOpenGLShader\fP (const std::string &filepath)"
.br
.ti -1c
.RI "virtual void \fBReload\fP () override"
.br
.ti -1c
.RI "virtual void \fBAddShaderReloadedCallback\fP (const \fBShaderReloadedCallback\fP &callback) override"
.br
.ti -1c
.RI "virtual void \fBBind\fP () const override"
.br
.ti -1c
.RI "virtual void \fBUploadUniformBuffer\fP (const \fBUniformBufferBase\fP &uniformBuffer) override"
.br
.ti -1c
.RI "virtual void \fBSetVSMaterialUniformBuffer\fP (\fBBuffer\fP buffer) override"
.br
.ti -1c
.RI "virtual void \fBSetPSMaterialUniformBuffer\fP (\fBBuffer\fP buffer) override"
.br
.ti -1c
.RI "virtual void \fBSetInt\fP (const std::string &name, int value) override"
.br
.ti -1c
.RI "virtual void \fBSetIntArray\fP (const std::string &name, int *values, uint32_t count) override"
.br
.ti -1c
.RI "virtual void \fBSetFloat\fP (const std::string &name, float value) override"
.br
.ti -1c
.RI "virtual void \fBSetFloat2\fP (const std::string &name, const glm::vec2 &value) override"
.br
.ti -1c
.RI "virtual void \fBSetFloat3\fP (const std::string &name, const glm::vec3 &value) override"
.br
.ti -1c
.RI "virtual void \fBSetFloat4\fP (const std::string &name, const glm::vec4 &value) override"
.br
.ti -1c
.RI "virtual void \fBSetMat3\fP (const std::string &name, const glm::mat3 &value) override"
.br
.ti -1c
.RI "virtual void \fBSetMat4\fP (const std::string &name, const glm::mat4 &value) override"
.br
.ti -1c
.RI "virtual const std::string & \fBGetName\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBRef\fP< \fBOpenGLShader\fP > \fBCreateFromString\fP (const std::string &source)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBLoad\fP (const std::string &source)"
.br
.ti -1c
.RI "std::string \fBReadShaderFromFile\fP (const std::string &filepath) const"
.br
.ti -1c
.RI "std::unordered_map< \fBGLenum\fP, std::string > \fBPreProcess\fP (const std::string &source)"
.br
.ti -1c
.RI "void \fBParse\fP ()"
.br
.ti -1c
.RI "void \fBParseUniform\fP (const std::string &statement, \fBShaderDomain\fP domain)"
.br
.ti -1c
.RI "void \fBParseUniformStruct\fP (const std::string &block, \fBShaderDomain\fP domain)"
.br
.ti -1c
.RI "\fBShaderStruct\fP * \fBFindStruct\fP (const std::string &name)"
.br
.ti -1c
.RI "int32_t \fBGetUniformLocation\fP (const std::string &name) const"
.br
.ti -1c
.RI "void \fBResolveUniforms\fP ()"
.br
.ti -1c
.RI "void \fBValidateUniforms\fP ()"
.br
.ti -1c
.RI "void \fBCompileAndUploadShader\fP ()"
.br
.ti -1c
.RI "void \fBResolveAndSetUniforms\fP (const \fBScope\fP< \fBOpenGLShaderUniformBufferDeclaration\fP > &decl, \fBBuffer\fP buffer)"
.br
.ti -1c
.RI "void \fBResolveAndSetUniform\fP (\fBOpenGLShaderUniformDeclaration\fP *uniform, \fBBuffer\fP buffer)"
.br
.ti -1c
.RI "void \fBResolveAndSetUniformArray\fP (\fBOpenGLShaderUniformDeclaration\fP *uniform, \fBBuffer\fP buffer)"
.br
.ti -1c
.RI "void \fBResolveAndSetUniformField\fP (const \fBOpenGLShaderUniformDeclaration\fP &field, \fBbyte\fP *data, int32_t offset)"
.br
.ti -1c
.RI "void \fBUploadUniformInt\fP (const std::string &name, int value)"
.br
.ti -1c
.RI "void \fBUploadUniformIntArray\fP (const std::string &name, int *values, uint32_t count)"
.br
.ti -1c
.RI "void \fBUploadUniformFloat\fP (const std::string &name, float values)"
.br
.ti -1c
.RI "void \fBUploadUniformFloat2\fP (const std::string &name, const glm::vec2 &values)"
.br
.ti -1c
.RI "void \fBUploadUniformFloat3\fP (const std::string &name, const glm::vec3 &values)"
.br
.ti -1c
.RI "void \fBUploadUniformFloat4\fP (const std::string &name, const glm::vec4 &values)"
.br
.ti -1c
.RI "void \fBUploadUniformMat3\fP (const std::string &name, const glm::mat3 &matrix)"
.br
.ti -1c
.RI "void \fBUploadUniformMat4\fP (const std::string &name, const glm::mat4 &matrix)"
.br
.ti -1c
.RI "void \fBUploadUniformInt\fP (uint32_t location, int value)"
.br
.ti -1c
.RI "void \fBUploadUniformIntArray\fP (uint32_t location, int *values, uint32_t count)"
.br
.ti -1c
.RI "void \fBUploadUniformFloat\fP (uint32_t location, float values)"
.br
.ti -1c
.RI "void \fBUploadUniformFloat2\fP (uint32_t location, const glm::vec2 &values)"
.br
.ti -1c
.RI "void \fBUploadUniformFloat3\fP (uint32_t location, const glm::vec3 &values)"
.br
.ti -1c
.RI "void \fBUploadUniformFloat4\fP (uint32_t location, const glm::vec4 &values)"
.br
.ti -1c
.RI "void \fBUploadUniformMat3\fP (uint32_t location, const glm::mat3 &matrix)"
.br
.ti -1c
.RI "void \fBUploadUniformMat4\fP (uint32_t location, const glm::mat4 &matrix)"
.br
.ti -1c
.RI "void \fBUploadUniformMat4Array\fP (uint32_t location, const glm::mat4 &values, uint32_t count)"
.br
.ti -1c
.RI "void \fBUploadUniformStruct\fP (\fBOpenGLShaderUniformDeclaration\fP *uniform, \fBbyte\fP *buffer, uint32_t offset)"
.br
.ti -1c
.RI "const \fBShaderUniformBufferList\fP & \fBGetVSRendererUniforms\fP () const override"
.br
.ti -1c
.RI "const \fBShaderUniformBufferList\fP & \fBGetPSRendererUniforms\fP () const override"
.br
.ti -1c
.RI "const \fBShaderUniformBufferDeclaration\fP & \fBGetVSMaterialUniformBuffer\fP () const override"
.br
.ti -1c
.RI "const \fBShaderUniformBufferDeclaration\fP & \fBGetPSMaterialUniformBuffer\fP () const override"
.br
.ti -1c
.RI "const \fBShaderResourceList\fP & \fBGetResources\fP () const override"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static \fBGLenum\fP \fBShaderTypeFromString\fP (const std::string &type)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "uint32_t \fBm_rendererID\fP = 0"
.br
.ti -1c
.RI "bool \fBm_loaded\fP = false"
.br
.ti -1c
.RI "std::string \fBm_name\fP"
.br
.ti -1c
.RI "std::string \fBm_assetPath\fP"
.br
.ti -1c
.RI "std::unordered_map< \fBGLenum\fP, std::string > \fBm_shaderSource\fP"
.br
.ti -1c
.RI "std::vector< \fBShaderReloadedCallback\fP > \fBm_shaderReloadedCallbacks\fP"
.br
.ti -1c
.RI "\fBShaderUniformBufferList\fP \fBm_vSRendererUniformBuffers\fP"
.br
.ti -1c
.RI "\fBShaderUniformBufferList\fP \fBm_pSRendererUniformBuffers\fP"
.br
.ti -1c
.RI "\fBScope\fP< \fBOpenGLShaderUniformBufferDeclaration\fP > \fBm_vSMaterialUniformBuffer\fP"
.br
.ti -1c
.RI "\fBScope\fP< \fBOpenGLShaderUniformBufferDeclaration\fP > \fBm_pSMaterialUniformBuffer\fP"
.br
.ti -1c
.RI "\fBShaderResourceList\fP \fBm_resources\fP"
.br
.ti -1c
.RI "\fBShaderStructList\fP \fBm_structs\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Brigerad::OpenGLShader::OpenGLShader ()\fC [default]\fP"

.SS "Brigerad::OpenGLShader::OpenGLShader (const std::string & filepath)"

.SH "Member Function Documentation"
.PP 
.SS "\fBBrigerad::Ref\fP< \fBBrigerad::OpenGLShader\fP > Brigerad::OpenGLShader::CreateFromString (const std::string & source)\fC [static]\fP"

.SS "void Brigerad::OpenGLShader::Reload ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::AddShaderReloadedCallback (const \fBShaderReloadedCallback\fP & callback)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::Bind () const\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::UploadUniformBuffer (const \fBUniformBufferBase\fP & uniformBuffer)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetVSMaterialUniformBuffer (\fBBuffer\fP buffer)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetPSMaterialUniformBuffer (\fBBuffer\fP buffer)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetInt (const std::string & name, int value)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetIntArray (const std::string & name, int * values, uint32_t count)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetFloat (const std::string & name, float value)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetFloat2 (const std::string & name, const glm::vec2 & value)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetFloat3 (const std::string & name, const glm::vec3 & value)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetFloat4 (const std::string & name, const glm::vec4 & value)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetMat3 (const std::string & name, const glm::mat3 & value)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::SetMat4 (const std::string & name, const glm::mat4 & value)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "virtual const std::string& Brigerad::OpenGLShader::GetName () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "void Brigerad::OpenGLShader::Load (const std::string & source)\fC [private]\fP"

.SS "std::string Brigerad::OpenGLShader::ReadShaderFromFile (const std::string & filepath) const\fC [private]\fP"

.SS "std::unordered_map< \fBGLenum\fP, std::string > Brigerad::OpenGLShader::PreProcess (const std::string & source)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::Parse ()\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::ParseUniform (const std::string & statement, \fBShaderDomain\fP domain)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::ParseUniformStruct (const std::string & block, \fBShaderDomain\fP domain)\fC [private]\fP"

.SS "\fBBrigerad::ShaderStruct\fP * Brigerad::OpenGLShader::FindStruct (const std::string & name)\fC [private]\fP"

.SS "int32_t Brigerad::OpenGLShader::GetUniformLocation (const std::string & name) const\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::ResolveUniforms ()\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::ValidateUniforms ()\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::CompileAndUploadShader ()\fC [private]\fP"

.SS "\fBGLenum\fP Brigerad::OpenGLShader::ShaderTypeFromString (const std::string & type)\fC [static]\fP, \fC [private]\fP"

.SS "void Brigerad::OpenGLShader::ResolveAndSetUniforms (const \fBScope\fP< \fBOpenGLShaderUniformBufferDeclaration\fP > & decl, \fBBuffer\fP buffer)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::ResolveAndSetUniform (\fBOpenGLShaderUniformDeclaration\fP * uniform, \fBBuffer\fP buffer)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::ResolveAndSetUniformArray (\fBOpenGLShaderUniformDeclaration\fP * uniform, \fBBuffer\fP buffer)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::ResolveAndSetUniformField (const \fBOpenGLShaderUniformDeclaration\fP & field, \fBbyte\fP * data, int32_t offset)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformInt (const std::string & name, int value)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformIntArray (const std::string & name, int * values, uint32_t count)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformFloat (const std::string & name, float values)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformFloat2 (const std::string & name, const glm::vec2 & values)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformFloat3 (const std::string & name, const glm::vec3 & values)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformFloat4 (const std::string & name, const glm::vec4 & values)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformMat3 (const std::string & name, const glm::mat3 & matrix)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformMat4 (const std::string & name, const glm::mat4 & matrix)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformInt (uint32_t location, int value)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformIntArray (uint32_t location, int * values, uint32_t count)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformFloat (uint32_t location, float values)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformFloat2 (uint32_t location, const glm::vec2 & values)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformFloat3 (uint32_t location, const glm::vec3 & values)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformFloat4 (uint32_t location, const glm::vec4 & values)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformMat3 (uint32_t location, const glm::mat3 & matrix)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformMat4 (uint32_t location, const glm::mat4 & matrix)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformMat4Array (uint32_t location, const glm::mat4 & values, uint32_t count)\fC [private]\fP"

.SS "void Brigerad::OpenGLShader::UploadUniformStruct (\fBOpenGLShaderUniformDeclaration\fP * uniform, \fBbyte\fP * buffer, uint32_t offset)\fC [private]\fP"

.SS "const \fBShaderUniformBufferList\fP& Brigerad::OpenGLShader::GetVSRendererUniforms () const\fC [inline]\fP, \fC [override]\fP, \fC [private]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "const \fBShaderUniformBufferList\fP& Brigerad::OpenGLShader::GetPSRendererUniforms () const\fC [inline]\fP, \fC [override]\fP, \fC [private]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "const \fBShaderUniformBufferDeclaration\fP& Brigerad::OpenGLShader::GetVSMaterialUniformBuffer () const\fC [inline]\fP, \fC [override]\fP, \fC [private]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "const \fBShaderUniformBufferDeclaration\fP& Brigerad::OpenGLShader::GetPSMaterialUniformBuffer () const\fC [inline]\fP, \fC [override]\fP, \fC [private]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SS "const \fBShaderResourceList\fP& Brigerad::OpenGLShader::GetResources () const\fC [inline]\fP, \fC [override]\fP, \fC [private]\fP, \fC [virtual]\fP"

.PP
Implements \fBBrigerad::Shader\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "uint32_t Brigerad::OpenGLShader::m_rendererID = 0\fC [private]\fP"

.SS "bool Brigerad::OpenGLShader::m_loaded = false\fC [private]\fP"

.SS "std::string Brigerad::OpenGLShader::m_name\fC [private]\fP"

.SS "std::string Brigerad::OpenGLShader::m_assetPath\fC [private]\fP"

.SS "std::unordered_map<\fBGLenum\fP, std::string> Brigerad::OpenGLShader::m_shaderSource\fC [private]\fP"

.SS "std::vector<\fBShaderReloadedCallback\fP> Brigerad::OpenGLShader::m_shaderReloadedCallbacks\fC [private]\fP"

.SS "\fBShaderUniformBufferList\fP Brigerad::OpenGLShader::m_vSRendererUniformBuffers\fC [private]\fP"

.SS "\fBShaderUniformBufferList\fP Brigerad::OpenGLShader::m_pSRendererUniformBuffers\fC [private]\fP"

.SS "\fBScope\fP<\fBOpenGLShaderUniformBufferDeclaration\fP> Brigerad::OpenGLShader::m_vSMaterialUniformBuffer\fC [private]\fP"

.SS "\fBScope\fP<\fBOpenGLShaderUniformBufferDeclaration\fP> Brigerad::OpenGLShader::m_pSMaterialUniformBuffer\fC [private]\fP"

.SS "\fBShaderResourceList\fP Brigerad::OpenGLShader::m_resources\fC [private]\fP"

.SS "\fBShaderStructList\fP Brigerad::OpenGLShader::m_structs\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Brigerad from the source code\&.
